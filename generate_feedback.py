#!/usr/bin/env python

# This scripts generates the feedback file(s) for the submissions.
# It parses the submission folder looking for:
#   1- "out.txt the output of JUnit tests generated by running "runtest.py"
#   2- "answers.txt" the answer file submitted be the student -- this may need to be removed
#   3- "PrecipStat.java" the java files submitted by the student -- this may need to be removed

# usage: generate_feedback.py folder1
#			   generates the feedback for the student files in "folder1" and save it to "_feedbacks/folder1.html"
#
#		generate_feedback.py -all
#			   generates the feedback for all the folders in the current directory


import sys
import re
import cgi
import csv
import os

''' update GraceTokensLab -- '''
''' update gMax -- '''

import process_output as po

def generate_feedback_file(dir):
	stu_name = dir[:dir.find('_')]
	row_index = -1
	for index, row in enumerate(grace):
		if (row[1] == stu_name):
			row_index = index
			break
	n_token = int(grace[row_index][2]) if(row_index > -1) else 0
	if(row_index == -1):
		raise Exception("\033[91m--- Student ({}) not found in the grace token list ---\033[0m".format(stu_name))

	(line, header, tR, tH, tF, non_comp_detail) = po.process_output_file(dir) # test result tR, testid tH, test fail desc tF

	w = dict(zip(header, line))

	style = '''h4{margin:9px 4px -20px 1px;}
p{margin:1px 1px 5px 175px;}
pre{background-color: beige; padding: 10px;}
.p{color:#308d46}
.f{color:#c52e00}
div {border: 1px solid; border-radius: 4px; margin-bottom: -1px;}'''
	
	res = ['<html><header>\n<style>{}</style></header><body>'.format(style)]
	res += ['<h2>EECS2030 Lab7</h2>']
	res += ["Feedback for <i>{}</i><br/>".format(stu_name)]
	gMax = 20

	g = 0
	filename = 'Account.java'
	res1 = ['<h3>{}</h3>'.format(filename)]
	if(w[filename] == '0'):
		res1 += ['The file "{}" is not found: 0/{}<br/>'.format(filename, gMax)]
		res1 += ['Check the files you submitted in eClass and make sure you submitted the file with the exact name.<br/>\n']
		foundfiles = [name for name in os.listdir("s/"+dir) if not "feedback.html" in name]
		res1 += ['<pre>The following files are found:\n\n{}</pre><br/>\n'.format('\n'.join(foundfiles))]
	else:
		if (w['is_comp'] == 'no-compile'):
			res1 += ['The submitted file could not be compiled: 0/{}<br/>'.format(gMax)]
			res1 += ['''Thare are so many reasons for non-complied code, for example:<ul>
<li>Wrong method name or signature.</li>
<li>Wrong class name (shall be <code>Account</code>)</li>
<li>Wrong package name (shall be <code>Lab6</code>)</li>
<li>The java class file name shall match the class name</li>
<li>Syntax errors</li>
</ul>
Note that names in java are case-sensitive.
''']
			res1 += ['<pre>{}</pre><br/>'.format(strip_html(non_comp_detail))]
		elif (w['is_timeout'] == 'timeout'):
			res1 += ['''The testers could not run within the expected time: 0/{}.<br/><br/>
This may happen for one of the following reasons:<ul>
<li>There is an infinite loop in the code.</li>
<li>The program is waiting for input from the user.</li></ul>'''.format(gMax)]
		else:
			res1_1, g = process_compiled_output_result(tR, tH, tF)
			res1 += ["<b>Tests passed:</b> {}/{}<br/>".format(g, gMax)]
			res1 += res1_1


	if(g > 0):
		if(w['is_late'] == 'late'):
			res += ["This is a late submission at " + w['submit_date'] + ", that is more than 24 hours after the deadline. No token will be applied.<br/>"]
			res += ["Your lab mark is: <del>{}</del> <ins>0</ins>/{}<br/>".format(g, gMax)]
		elif(w['is_grace'] == 'grace'):
			res += ["This is a late submission at " + w['submit_date'] + "."]
			if (n_token > 0):
				res += ["A grace token is applied.<br/>"]
				res += ["Your lab mark is: {}/{}<br/>".format(g, gMax)]
				decrease_tokens(row_index)
				n_token -= 1
				print("\033[93m------------------------------------------ Decrease tokens, new tokens: {}\033[0m".format(n_token))
			else:
				print("\033[91m------------------------------------------ No tokens\033[0m")
				res += ["No enough tokens.<br/><br/>"]
				res += ["Your lab mark is: <del>{}</del> <ins>0</ins>/{}<br/>".format(g, gMax)]
		else:
			res += ["Your lab mark is: {}/{}<br/>".format(g, gMax)]
	else:
		res += ["Your lab mark is: {}/{}<br/>".format(g, gMax)]

	res += ['<span class="tok">Remaining tokens: {}</span><br/>'.format(n_token)]
	res += ["<hr/>"]
	res += res1
	res += ['</body></html>']

	return "\n".join(res)

def process_compiled_output_result(tR, tH, tF):
	res = []
	total = 0

	for i in range(len(tH)):
		res += ['<div><h4>{}</h4>'.format(tH[i])]
		if(tR[i] == '0'):
			res += ['<p class="f">Failed the test: 0<br/>']
			desc = strip_html(tF[i])
			res += ['<code>' + desc+ '</code></p>']
		else:
			res += ['<p class="p">Passed the test: 1</p>']
			total += 1
		res += ['</div>']

	return res, total

def strip_html(txt):
	return txt.replace('&', '&amp;').replace('<', '&lt;').replace('>', '&gt;')
	
def save_feedback_file(dir, feedback):
	if not os.path.exists('f/' + dir):
		os.makedirs('f/' + dir)
	fname = "f/" + dir + "/feedback.html"
	f = open(fname, "w")
	f.write(feedback)
	f.close

def generate_feedback_files():
	dnames = [name for name in os.listdir("s/")]
	for d in dnames:
		print(d)
		save_feedback_file(d, generate_feedback_file(d))

def read_grace_tokens():
	with open("../GraceTokensLab6.csv", mode='r') as csv_file:
		csv_reader = csv.reader(csv_file) #csv.DictReader(csv_file)
		grace = [row for row in csv_reader]
	return grace

def write_grace_tokens():
	with open("../GraceTokensLab7.csv", mode='wb') as csv_file:
		csv_writer = csv.writer(csv_file, delimiter=',')
		for row in grace:
			csv_writer.writerow(row)

def decrease_tokens(row_index):
	x = int(grace[row_index][2]) - 1
	grace[row_index][2] = str(x)

if __name__ == "__main__":
	if(len(sys.argv) < 2):
		print("Usage: {} <studentfolder> | -all".format(sys.argv[0]))
		exit()

	global grace
	grace = read_grace_tokens()

	if(sys.argv[1] == "-all"):
		generate_feedback_files()
	else:
		d = sys.argv[1]
		s = generate_feedback_file(d)
		save_feedback_file(d, s)
	write_grace_tokens()
